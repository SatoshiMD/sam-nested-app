AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 5

Parameters:
  Env:
    Type: String
    Default: satoshi
  Domain:
    Type: String
    Default: smidorikawa.com

Resources:
  SampleLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: sample-lambda-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: "*"
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:AddPermission
                Resource: '*'
  SampleMyLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location: common-layer-sample/template.yaml
      Parameters:
        Env: !Ref Env
  SampleMyLambdas:
    Type: AWS::Serverless::Application
    DependsOn:
      - SampleMyLayer
    Properties:
      Location: sam-lambda-sample/template.yaml
      Parameters:
        Env: !Ref Env
        SampleRoleArn: !GetAtt SampleLambdaIAMRole.Arn
  SampleMyAnotherLambdas:
    Type: AWS::Serverless::Application
    DependsOn:
      - SampleMyLayer
    Properties:
      Location: sam-lambda-another-lambda/template.yaml
      Parameters:
        Env: !Ref Env
        SampleRoleArn: !GetAtt SampleLambdaIAMRole.Arn
  LambdaFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - SampleMyLambdas
      - SampleMyAnotherLambdas
    Properties:
      CodeUri: ./
      Handler: lambda_proxy.lambda_handler
      Runtime: python3.9
      FunctionName: !Sub ${Env}-api-proxy-function
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: 'arn:aws:logs:*:*:*'
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
                - lambda:AddPermission
              Resource: '*'
      Events:
        ProxyApiGetEvent:
          Type: Api
          Properties:
            Method: any
            Path: 'api/{proxy+}'

Outputs:
  SampleLambdaIAMRole:
    Description: "Sample Role ARN"
    Value: !GetAtt SampleLambdaIAMRole.Arn
  SampleMyLayer:
    Description: "Sample Layer ARN"
    Value: !Ref SampleMyLayer
  SampleMyLambdas:
    Description: "Sample My Lambdas ARN"
    Value: !Ref SampleMyLambdas
  SampleMyLambda1Name:
    Description: "SampleMyLambdas1"
    Value: !GetAtt SampleMyLambdas.Outputs.SampleLambdaFunctionName

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Env:
    Type: String
    Default: satoshi
  Domain:
    Type: String
    Default: smidorikawa.com

Resources:
  SampleBucket:
    Type: AWS::S3::Bucket
  SampleLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: sample-lambda-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: "*"
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - lambda:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: '*'
  SampleMyLambdas:
    Type: AWS::Serverless::Application
    Properties:
      Location: sam-lambda-sample/template.yaml
      Parameters:
        Env: !Ref Env
        SampleRoleArn: !GetAtt SampleLambdaIAMRole.Arn
  SampleStepfunction:
    Type: AWS::Serverless::Application
    Properties:
      Location: sam-stepfunction-sample/template.yaml
      Parameters:
        Env: !Ref Env
        SampleRoleArn: !GetAtt SampleLambdaIAMRole.Arn


Outputs:
  SampleLambdaIAMRole:
    Description: "Sample Role ARN"
    Value: !GetAtt SampleLambdaIAMRole.Arn
  SampleMyLambdas:
    Description: "Sample My Lambdas ARN"
    Value: !Ref SampleMyLambdas
